Description:
  Creates VPC with Lambda fuction which adds a KeyPair from S3 to EC2

Parameters:
  VpcCIDR:
    Description: IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnetCIDR:
    Description: IP range (CIDR notation) for the public subnet
    Type: String
    Default: 10.192.10.0/24

  PrivateSubnetCIDR:
    Description: IP range (CIDR notation) for the private subnet
    Type: String
    Default: 10.192.20.0/24

  MyIP:
    Description: My IP address (subject to change)
    Type: String
    Default: 188.29.165.117/32

#  KeyName:
#    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
#    Type: AWS::EC2::KeyPair::KeyName
#    Default: mh



Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: mh


  # Internet Gateway #

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: mh
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  # Subnets #

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: mh

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: mh


  # NAT Gateway #

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet


  # Public Routes #

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: mh

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet


  # Private Routes #

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: mh

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet


  # Lambda Execution Role #

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "getKeyPair"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Action: 
                  - "s3:*"
                  - "ec2:*"
                Resource: "*"


  # Adds Lambda Function that adds Key Pair #
  
  AddKeyPairLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.6
      Tags:
        - Key: Name
          Value: mh
      Code:
        ZipFile: |
          import boto3
          import botocore
          import logging
          import cfnresponse

          def lambda_handler(event, context):

            s3 = boto3.client('s3')
            ec2 = boto3.client('ec2')

            try:
                bucket_name = 'mh-pubkey'
                key = 'mh.pub'
                key_name = 'mh'

                response = s3.get_object(Bucket=bucket_name, Key=key)
                s3_key = response['Body'].read()

                ec2.import_key_pair(KeyName=key_name, PublicKeyMaterial=s3_key)

                cfnresponse.send(event, context, cfnresponse.SUCCESS)
              
            except Exception as e:
                logging.exception(e)
                cfnresponse.send(event, context, cfnresponse.FAILED)


  # Runs Lambda Function #

  RunKeyPairLambda:
    Type: Custom::KeyBoi
    Properties:
      ServiceToken: !GetAtt AddKeyPairLambda.Arn


  # Security Group #

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: test sg
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIP
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: mh


  # EC2 #

  EC2:
    Type: AWS::EC2::Instance
    Properties: 
#      KeyName : !Ref KeyName
      ImageId:  ami-08935252a36e25f85
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PublicSubnet
      Tags: 
        - Key: Name 
          Value: mh


Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnet:
    Description: Ref to the public subnet
    Value: !Ref PublicSubnet

  PrivateSubnet:
    Description: Ref to the private subnet
    Value: !Ref PrivateSubnet
